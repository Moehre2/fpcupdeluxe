Index: compiler/systems/t_beos.pas
===================================================================
--- compiler/systems/t_beos.pas	(revision 44308)
+++ compiler/systems/t_beos.pas	(working copy)
@@ -44,6 +44,7 @@
 
     tlinkerbeos=class(texternallinker)
     private
+      LdScriptResponseFile : boolean;
       Function  WriteResponseFile(isdll:boolean;makelib:boolean) : Boolean;
     public
       constructor Create;override;
@@ -189,21 +190,33 @@
 
 procedure TLinkerBeOS.SetDefaultInfo;
 begin
+  LdScriptResponseFile:=(source_info.system in systems_windows);
+
   with Info do
    begin
-     ExeCmd[1]:='ld $OPT $DYNLINK $STATIC $STRIP -L. -o $EXE $CATRES';
-     DllCmd[1]:='ld $OPT $INIT $FINI $SONAME -shared -L. -o $EXE $CATRES';
-     DllCmd[2]:='strip --strip-unneeded $EXE';
-(*
-     ExeCmd[1]:='sh $RES $EXE $OPT $STATIC $STRIP -L.';
-{     ExeCmd[1]:='sh $RES $EXE $OPT $DYNLINK $STATIC $STRIP -L.';}
-      DllCmd[1]:='sh $RES $EXE $OPT -L.';
+     ExeCmd[1]:='ld $OPT $DYNLINK $STATIC $STRIP -L. -o $EXE';
+     DllCmd[1]:='ld $OPT $INIT $FINI $SONAME -shared -L. -o $EXE';
 
-{     DllCmd[1]:='sh $RES $EXE $OPT -L. -g -nostart -soname=$EXE';
- }    DllCmd[2]:='strip --strip-unneeded $EXE';
-{     DynamicLinker:='/lib/ld-beos.so.2';}
-*)
+     //use resfile on Windows due to batfile length issues.
+     if LdScriptResponseFile then
+     begin
+       if not(cs_link_pre_binutils_2_19 in current_settings.globalswitches) or
+         (length(sysrootpath)>0) then
+         begin
+           ExeCmd[1]:=ExeCmd[1]+' -T';
+           DllCmd[1]:=DllCmd[1]+' -T';
    end;
+       ExeCmd[1]:=ExeCmd[1]+' $RES';
+       DllCmd[1]:=DllCmd[1]+' $RES';
+     end
+     else
+     begin
+       ExeCmd[1]:=ExeCmd[1]+' $CATRES';
+       DllCmd[1]:=DllCmd[1]+' $CATRES';
+     end;
+
+     DllCmd[2]:='strip --strip-unneeded $EXE';
+   end;
 end;
 
 
@@ -241,55 +254,58 @@
 
   { Open link.res file }
   LinkRes:=TLinkRes.Create(outputexedir+Info.ResName,false);
-  {
-  if not isdll then
-   LinkRes.Add('ld -o $1 $2 $3 $4 $5 $6 $7 $8 $9 \')
-  else
-   LinkRes.Add('ld -o $1 -e 0 $2 $3 $4 $5 $6 $7 $8 $9\');
-  }
-  LinkRes.Add('-m');
-//  LinkRes.Add('elf_i386_be');
-  LinkRes.Add('elf_i386_haiku');
-  LinkRes.Add('-shared');
-  LinkRes.Add('-Bsymbolic');
+  with LinkRes do
+  begin
+    Add('-m');
+    Add('elf_i386_haiku');
+    Add('-shared');
+    Add('-Bsymbolic');
 
   { Write path to search libraries }
   HPath:=TCmdStrListItem(current_module.locallibrarysearchpath.First);
   while assigned(HPath) do
    begin
-     LinkRes.Add('-L'+HPath.Str);
+       if LdScriptResponseFile then
+         Add('SEARCH_DIR("'+HPath.Str+'")')
+       else
+         Add('-L'+HPath.Str);
      HPath:=TCmdStrListItem(HPath.Next);
    end;
   HPath:=TCmdStrListItem(LibrarySearchPath.First);
   while assigned(HPath) do
    begin
-     LinkRes.Add('-L'+HPath.Str);
+       if LdScriptResponseFile then
+         Add('SEARCH_DIR("'+HPath.Str+'")')
+       else
+         Add('-L'+HPath.Str);
      HPath:=TCmdStrListItem(HPath.Next);
    end;
 
+    if LdScriptResponseFile then StartSection('INPUT(');
+
   { try to add crti and crtbegin if linking to C }
   if linklibc then
    begin
      if librarysearchpath.FindFile('crti.o',false,s) then
-      LinkRes.AddFileName(s);
+        AddFileName(s);
      if librarysearchpath.FindFile('crtbegin.o',false,s) then
-      LinkRes.AddFileName(s);
-{      s:=librarysearchpath.FindFile('start_dyn.o',found)+'start_dyn.o';
+        AddFileName(s);
+      {s:=librarysearchpath.FindFile('start_dyn.o',found)+'start_dyn.o';
      if found then LinkRes.AddFileName(s+' \');}
 
      if prtobj<>'' then
-      LinkRes.AddFileName(FindObjectFile(prtobj,'',false));
+        AddFileName(FindObjectFile(prtobj,'',false));
 
 //     if isdll then
-//      LinkRes.AddFileName(FindObjectFile('func.o','',false));
+//      AddFileName(FindObjectFile('func.o','',false));
 
      if librarysearchpath.FindFile('init_term_dyn.o',false,s) then
-      LinkRes.AddFileName(s);
+        AddFileName(s);
    end
   else
    begin
      if prtobj<>'' then
-      LinkRes.AddFileName(FindObjectFile(prtobj,'',false));
+        AddFileName(FindObjectFile(prtobj,'',false));
    end;
 
   { main objectfiles }
@@ -297,10 +313,13 @@
    begin
      s:=ObjectFiles.GetFirst;
      if s<>'' then
-      LinkRes.AddFileName(s);
+        AddFileName(s);
    end;
 
-{  LinkRes.Add('-lroot \');
+    if LdScriptResponseFile then EndSection(')');
+
+
+  {  LinkRes.Add('-lroot \');
   LinkRes.Add('/boot/develop/tools/gnupro/lib/gcc-lib/i586-beos/2.9-beos-991026/crtend.o \');
   LinkRes.Add('/boot/develop/lib/x86/crtn.o \');}
 
@@ -307,16 +326,19 @@
   { Write staticlibraries }
   if not StaticLibFiles.Empty then
    begin
+     if LdScriptResponseFile then Add('GROUP(');
      While not StaticLibFiles.Empty do
       begin
         S:=StaticLibFiles.GetFirst;
-        LinkRes.AddFileName(s)
+        AddFileName(s)
       end;
+     if LdScriptResponseFile then Add(')');
    end;
 
   { Write sharedlibraries like -l<lib> }
   if not SharedLibFiles.Empty then
    begin
+     if LdScriptResponseFile then Add('INPUT(');
      While not SharedLibFiles.Empty do
       begin
         S:=SharedLibFiles.GetFirst;
@@ -325,7 +347,7 @@
            i:=Pos(target_info.sharedlibext,S);
            if i>0 then
             Delete(S,i,255);
-           LinkRes.Add('-l'+s);
+           Add('-l'+s);
          end
         else
          begin
@@ -332,28 +354,75 @@
            linklibc:=true;
          end;
       end;
+     if LdScriptResponseFile then Add(')');
      { be sure that libc is the last lib }
 {     if linklibc then
-       LinkRes.Add('-lroot');}
+       Add('-lroot');}
 {     if linkdynamic and (Info.DynamicLinker<>'') then
-       LinkRes.AddFileName(Info.DynamicLinker);}
+       AddFileName(Info.DynamicLinker);}
    end;
   if isdll then
-   LinkRes.Add('-lroot');
+    begin
+      if LdScriptResponseFile then Add('INPUT(');
+      Add('-lroot');
+      if LdScriptResponseFile then Add(')');
+    end;
 
   { objects which must be at the end }
   if linklibc then
    begin
      if librarysearchpath.FindFile('crtend.o',false,s) then
-      LinkRes.AddFileName(s);
+          begin
+            if LdScriptResponseFile then Add('INPUT(');
+            AddFileName(s);
+            if LdScriptResponseFile then Add(')');
+          end;
      if librarysearchpath.FindFile('crtn.o',false,s) then
-      LinkRes.AddFileName(s);
+         begin
+            if LdScriptResponseFile then Add('INPUT(');
+            AddFileName(s);
+            if LdScriptResponseFile then Add(')');
    end;
+    end;
 
-{ Write and Close response }
+    { Write and Close response }
+
+    if LdScriptResponseFile then
+    begin
+      { Entry point. Only needed for executables, as for shared libraries we use
+        the -init command line option instead
+
+       The "ENTRY" linkerscript command does not have any effect when augmenting
+       a linker script, so use the command line parameter instead }
+      if (not isdll) then
+        if (not linklibc) then
+          info.ExeCmd[1]:=info.ExeCmd[1]+' -e _dynamic_start'
+        else
+          info.ExeCmd[1]:=info.ExeCmd[1]+' -e _start';
+
+      Add('SECTIONS');
+      Add('{');
+      if not(cs_link_pre_binutils_2_19 in current_settings.globalswitches) then
+        { we can't use ".data", as that would hide the .data from the
+          original linker script in combination with the INSERT at the end }
+        Add('  .fpcdata           :')
+      else
+        Add('  .data           :');
+      Add('  {');
+      Add('    KEEP (*(.fpc .fpc.n_version .fpc.n_links))');
+      Add('  }');
+      Add('  .threadvar : { *(.threadvar .threadvar.* .gnu.linkonce.tv.*) }');
+      Add('}');
+      { this "INSERT" means "merge into the original linker script, even if
+        -T is used" }
+      if not(cs_link_pre_binutils_2_19 in current_settings.globalswitches) then
+        Add('INSERT AFTER .data;');
+    end;
+
   linkres.writetodisk;
   linkres.free;
 
+  end;
   WriteResponseFile:=True;
 end;
 